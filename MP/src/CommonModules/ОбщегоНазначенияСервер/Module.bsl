
#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьСинхронизациюНаСервере(ВыбОбъектВыгрузки = Неопределено, ПодтверждениеЗагрузки = Ложь) ЭКспорт  
	
	// Добавил комментарий 
	
	АдресПодключения = СокрЛП(Константы.ПодключениеСервер.Получить());
	ПортПодключения = СокрЛП(Константы.ПодключениеПорт.Получить());     
	ЛогинПодключения = СокрЛП(Константы.ПодключениеЛогин.Получить());     
	ПарольПодключения = СокрЛП(Константы.ПодключениеПароль.Получить());      
	ИмяПубликации = СокрЛП(Константы.ИмяПубликации.Получить());   
	
	Попытка
		ВСОпределение = Новый WSОпределения("http://" + АдресПодключения + ":" + ПортПодключения + "/" + ИмяПубликации + "/ws/WebОбмен.1cws?wsdl", ЛогинПодключения, ПарольПодключения);
		//ВСОпределение = Новый WSОпределения("http://" + АдресПодключения + ":" + ПортПодключения + "/TGA/ws/WebОбмен.1cws?wsdl");
		ВСервис = ВСОпределение.Сервисы.Получить("Data", "WebОбмен" );
		ВТочкаВхода = ВСервис.ТочкиПодключения.Получить("WebОбменSoap");
		ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("Синхронизация");      
		
		
		// Получаем данные из базы 1С
		ДанныеДляВыгрузки = ПолучитьДанныеДляВыгрузки(ВыбОбъектВыгрузки);				
		Данные = Новый ХранилищеЗначения(ДанныеДляВыгрузки, Новый СжатиеДанных(9)); 
		
		ДанныеXTDO = ВСОпределение.ФабрикаXDTO.Создать(ВОперация.Параметры.Получить("Данные").Тип, Данные);
		ВСПрокси = Новый WSПрокси(ВСОпределение, "Data", "WebОбмен", "WebОбменSoap");      
		ВСПрокси.Пользователь = ЛогинПодключения;
		ВСПрокси.Пароль = ПарольПодключения;
		
		Ответ = ВСПрокси.Синхронизация(ДанныеXTDO);   
		
		ПринятьИзмененияПоПлану(Ответ.Получить(), ВыбОбъектВыгрузки);
		
		Если ВыбОбъектВыгрузки = Неопределено Тогда                                     
			// Загружаем файлы
			ЗагрузитьФайлы(ВСОпределение, ВОперация, ВСПрокси);    
			
		Иначе 	    
			
			
			// Выгружаем файлы		
			ВыгрузитьФайлы(ВСОпределение, ВОперация, ВСПрокси, ВыбОбъектВыгрузки);    				
						
		КонецЕсли;      
		
		// Отсылаем сообщение загрузке обмена
		ДанныеДляВыгрузки = СоздаемПотверждениеОЗагрузке(ВыбОбъектВыгрузки);	
		Данные = Новый ХранилищеЗначения(ДанныеДляВыгрузки, Новый СжатиеДанных(9));
		ДанныеXTDO = ВСОпределение.ФабрикаXDTO.Создать(ВОперация.Параметры.Получить("Данные").Тип, Данные);     		
		Ответ = ВСПрокси.Синхронизация(ДанныеXTDO);   

				
		Возврат Истина;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
КонецФункции     

&НаСервере
Функция ВыгрузитьФайлы(ВСОпределение, ВОперация, ВСПрокси, ВыбОбъектВыгрузки)
	
	// 2.Выгружаем файлы            	
	
	ТаблицаФайлов = ПолучитьТаблицуФайлыДляВыгрузки(ВыбОбъектВыгрузки);   
	
	
	Если ТаблицаФайлов <> Неопределено И ТаблицаФайлов.Количество() > 0 Тогда
		
		
		
		МассивФайлов = Новый Массив;
		
		Для каждого СтрокаТаблицы ИЗ ТаблицаФайлов Цикл
			
			ТекОбъект = СтрокаТаблицы.Объект;      
			ТекИдентификатор = СтрокаТаблицы.Идентификатор;
			
			// Получаем данные файла     
			ДанныеОФайле = ПолучитьДанныеЗаписиРегистра(ТекОбъект, ТекИдентификатор);        
			
			Если ДанныеОФайле = Неопределено Тогда
				Продолжить;
			КонецЕсли;  
			
			СтруктураДанныхФайла = Новый Структура;  
			
			Если Метаданные.Справочники.Содержит(ТекОбъект.Метаданные()) Тогда
				ОбъектТип = "Справочник";
			ИначеЕсли Метаданные.Документы.Содержит(ТекОбъект.Метаданные()) Тогда
				ОбъектТип = "Документ";
			КонецЕсли;
			
			СтруктураДанныхФайла.Вставить("КодУзла", СокрЛП(ПланыОбмена.МобильныйОбмен.ЭтотУзел().Код));
			СтруктураДанныхФайла.Вставить("ОбъектТип", ОбъектТип);
			СтруктураДанныхФайла.Вставить("ОбъектВид", ТекОбъект.Метаданные().Имя);             
			СтруктураДанныхФайла.Вставить("ГУИД", Строка(ТекОбъект.ГУИД));  
			
			СтруктураДанныхФайла.Вставить("Идентификатор", СокрЛП(ДанныеОФайле.Идентификатор));        
			СтруктураДанныхФайла.Вставить("ИмяФайла", СокрЛП(ДанныеОФайле.ИмяФайла));   
			СтруктураДанныхФайла.Вставить("ДатаСохранения", XMLСтрока(ДанныеОФайле.ДатаСохранения));     
			СтруктураДанныхФайла.Вставить("РазмерФайла", XMLСтрока(ДанныеОФайле.РазмерФайла));          
			СтруктураДанныхФайла.Вставить("Комментарий", СокрЛП(ДанныеОФайле.Комментарий));   
			
			
			СтруктураДанныхФайла.Вставить("ДанныеВоВнешнемФайле", ?(ДанныеОФайле.ДанныеВоВнешнемФайле, "Истина", "Ложь"));   
			
			Если ДанныеОФайле.ДанныеВоВнешнемФайле Тогда
				СтруктураДанныхФайла.Вставить("Данные", "");  
			Иначе                  
				
				
				//	ДвоичныеДанные = ДанныеОФайле.Данные.Получить();
				
				ДанныеВBase64 = Base64Строка(ДанныеОФайле.Данные.Получить()); // Получим Base64 хранилища значения     
				СтруктураДанныхФайла.Вставить("Данные", ДанныеВBase64);  	      
				//СтруктураДанныхФайла.Вставить("Данные", ДвоичныеДанные);  	      
				//
				
				//ТипДвоичныеДанные = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "base64Binary");
				//ДвоичныеДанныеXDTO = ФабрикаXDTO.Создать(ТипДвоичныеДанные, ДвоичныеДанные);      
				//
				//СтруктураДанныхФайла.Вставить("Данные", ДвоичныеДанныеXDTO)
				
				
				
			КонецЕсли;                   
			
			СтруктураДанныхФайла.Вставить("Картинка", ?(ДанныеОФайле.Картинка, "Истина", "Ложь")); 
			СтруктураДанныхФайла.Вставить("GUID", СокрЛП(ДанныеОФайле.GUID));   
			СтруктураДанныхФайла.Вставить("ТипФайла", СокрЛП(ДанныеОФайле.ТипФайла)); 
			
			
			// отправляем данные файла  
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();  
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанныхФайла);            
			Результат = ЗаписьJSON.Закрыть();
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ЗаписатьXML(ЗаписьXML, Результат); 		
			
			ДанныеДляВыгрузки = ЗаписьXML.Закрыть();    	
			
			Данные = Новый ХранилищеЗначения(ДанныеДляВыгрузки, Новый СжатиеДанных(9));
			
			
			//Данные = Новый ХранилищеЗначения(СтруктураДанныхФайла, Новый СжатиеДанных(9));
			
			ДанныеXTDO = ВСОпределение.ФабрикаXDTO.Создать(ВОперация.Параметры.Получить("Данные").Тип, Данные);
			//ВСПрокси = Новый WSПрокси(ВСОпределение, "Data", "WebОбмен", "WebОбменSoap");      
			//ВСПрокси.Пользователь = ЛогинПодключения;
			//ВСПрокси.Пароль = ПарольПодключения;
			Ответ = ВСПрокси.ЗагрузкаФайлов(ДанныеXTDO);  
			
			ДанныеФайла = Ответ.Получить();   
			
			
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ДанныеФайла);
			//ЧтениеXML.Прочитать();
			
			Данные = ПрочитатьXML(ЧтениеXML);    
			
			ЧтениеJSON = Новый ЧтениеJSON; 
			ЧтениеJSON.УстановитьСтроку(Данные);
			//
			//ЧтениеJSON.УстановитьСтроку(
			СтруктураДанныхФайла = ПрочитатьJSON(ЧтениеJSON);   
			
			Если ТипЗнч(СтруктураДанныхФайла) = Тип("Структура")
				И СтруктураДанныхФайла.Свойство("ДатаЗагрузки") Тогда                 
				
				НаборЗаписей = РегистрыСведений.ФайлыДляОбмена.СоздатьНаборЗаписей();   
				НаборЗаписей.Отбор.Объект.Установить(СтрокаТаблицы.Объект);
				НаборЗаписей.Отбор.Идентификатор.Установить(СтрокаТаблицы.Идентификатор);   
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы); 
				НоваяЗапись.ДатаЗагрузки = XMLЗначение(Тип("Дата"), СтруктураДанныхФайла.ДатаЗагрузки);
				НаборЗаписей.Записать();				
				
			КонецЕсли;                  	
			
			//	ПринятьИзмененияПоПлану(Ответ.Получить());
			
		КонецЦикла;		
	КонецЕсли;	
	
КонецФункции     

Процедура ПринятьИзмененияПоПлану(СтрокаСообщения, ВыбОбъектВыгрузки)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаСообщения);
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		Данные = ПрочитатьXML(ЧтениеСообщения.ЧтениеXML);
		Если ЗначениеЗаполнено(Данные) Тогда           
			
			
			ЧтениеJSON = Новый ЧтениеJSON; 
			ЧтениеJSON.УстановитьСтроку(Данные);
			МассивОбъектовЗагрузки = ПрочитатьJSON(ЧтениеJSON); 
			
			Если ВыбОбъектВыгрузки = Неопределено Тогда		
				
				Для Каждого ОбъектЗагрузки ИЗ МассивОбъектовЗагрузки Цикл   
				
					Если ОбъектЗагрузки.ТипОбъектов = "Документ" Тогда
						
						Если ОбъектЗагрузки.ВидОбъектов = "ЗаказНаряд" Тогда
							// загружаем автомобиль      
							ДанныеАвтомобиль = ОбъектЗагрузки.Автомобиль;    
							
							Автомобиль = ОбщегоНазначенияКлиентСервер.НайтиДобавитьОбъектСправочника(ДанныеАвтомобиль); 
							
							// Записываем документ  
							
							ДокЗН = ОбщегоНазначенияКлиентСервер.НайтиДокумент(ОбъектЗагрузки.ВидОбъектов, ОбъектЗагрузки.ГУИД);
							
							Если ДокЗН = Неопределено Тогда
								ДокОбъект = Документы.ЗаказНаряд.СоздатьДокумент();
								ДокОбъект.ГУИД = ОбъектЗагрузки.ГУИД;  
								ДокОбъект.Автомобиль = Автомобиль;  
								
								
							Иначе	                                   
								ДокОбъект = ДокЗН.ПолучитьОбъект(); 
								
								Если ДокОбъект.Автомобиль <> Автомобиль Тогда
									ДокОбъект.Автомобиль = Автомобиль;  
									//	ДокОбъект.ПроведениеОсмотра.Очистить();
								КонецЕсли;
								                                                                  						
								                                                                  						
								// Есои состояние "ЗАкрыт" то удаляем фото
								
								Если ОбъектЗагрузки.Состояние.Код = "0000000005" Тогда								
									УдалитьКартинкииФайлыДляОбъекта(ДокОбъект.Ссылка);								
								КонецЕсли;
								
							КонецЕсли;  
							
							
							
							//Если СтрДлина(СокрЛП(ДокОбъект.ПричинаОбращения)) < СтрДлина(СокрЛП(ОбъектЗагрузки.ПричинаОбращения)) Тогда
							ДокОбъект.ПричинаОбращения = ОбъектЗагрузки.ПричинаОбращения;
							//	КонецЕсли;
							
							ДокОбъект.ПредставлениеДокумента = СокрЛП(ОбъектЗагрузки.ПредставлениеДокумента);					
							
							ДокОбъект.Номер = ОбъектЗагрузки.НомерДока;      
							ДокОбъект.Дата = XMLЗначение(Тип("Дата"), ОбъектЗагрузки.ДатаДока);  
							ДокОбъект.Комментарий = ОбъектЗагрузки.Комментарий;   
							
							ДокОбъект.Заказчик = ОбъектЗагрузки.Заказчик;     
							ДокОбъект.Контрагент = ОбъектЗагрузки.Контрагент; 
							
							ДокОбъект.Пробег = Автомобиль.Пробег;    
							
							
							ДокОбъект.СостояниеОсмотра = ?(ОбъектЗагрузки.СостояниеОсмотра = "", "", Перечисления.СостоянияОсмотра[ОбъектЗагрузки.СостояниеОсмотра]);	
							
							Состояние = ОбщегоНазначенияКлиентСервер.НайтиДобавитьОбъектСправочника(ОбъектЗагрузки.Состояние);  
							ДокОбъект.Состояние = Состояние;    
							
							
							// Заполняем табличную. часть ПроведениеОсмотра  
							
							Если ДокОбъект.ПроведениеОсмотра.Количество() = 0 Тогда   
								Для Каждого ТекСтрока ИЗ ОбъектЗагрузки.ТаблицаПроведениеОсмотра Цикл    
									НовСтрока = ДокОбъект.ПроведениеОсмотра.Добавить();      
									
									НовСтрока.ВидПроводимогоОсмотра = ?(ТекСтрока.ВидПроводимогоОсмотра = "", "", Перечисления.ВидыПроводимогоОсмотра[ТекСтрока.ВидПроводимогоОсмотра]);								
									НовСтрока.Состояние = ?(ТекСтрока.Состояние = "", Перечисления.ВидыСостоянийОсмотра.НеУказан, Перечисления.ВидыСостоянийОсмотра[ТекСтрока.Состояние]);								
									АвторЗаполнения = ОбщегоНазначенияКлиентСервер.НайтиДобавитьОбъектСправочника(ТекСтрока.АвторЗаполнения); 
									
									НовСтрока.АвторЗаполнения =АвторЗаполнения; 
									НовСтрока.Комментарий = ?(ТекСтрока.Комментарий = "", " ", ТекСтрока.Комментарий );		
									НовСтрока.ИдентификаторыПрисоединенныхФайлов = ТекСтрока.ИдентификаторыПрисоединенныхФайлов;      
									
									Если СокрЛП(ТекСтрока.ИдентификаторСтроки) = "" Тогда
										НовСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
									Иначе
										НовСтрока.ИдентификаторСтроки = ТекСтрока.ИдентификаторСтроки;
									КонецЕсли;
								КонецЦикла;                                       						
							КонецЕсли;       	
							
							
							
							// Заполняем табличную. часть Согласование hабот  
							
							Для Каждого СтрокаТаблицаСогласованиеРабот  ИЗ ОбъектЗагрузки.ТаблицаСогласованиеРабот Цикл
								
								ВыбСтрока =  ДокОбъект.СогласованиеРабот.Найти(СтрокаТаблицаСогласованиеРабот.ИдентификаторСтроки, "ИдентификаторСтроки");
								Если ВыбСтрока = Неопределено Тогда 
									ВыбСтрока = ДокОбъект.СогласованиеРабот.Добавить();      
									
									ВыбСтрока.Работы = СокрЛП(СтрокаТаблицаСогласованиеРабот.Работы);								
									АвторРабот = ОбщегоНазначенияКлиентСервер.НайтиДобавитьОбъектСправочника(СтрокаТаблицаСогласованиеРабот.АвторРабот);      				
									ВыбСтрока.АвторРабот = АвторРабот;       							
									ВыбСтрока.ДатаРабот = XMLЗначение(Тип("Дата"), СтрокаТаблицаСогласованиеРабот.ДатаРабот);     			
									ВыбСтрока.ИдентификаторСтроки = СокрЛП(СтрокаТаблицаСогласованиеРабот.ИдентификаторСтроки);     
									
									
								КонецЕсли;
								
								ВыбСтрока.СтатусСогласования = ?(СокрЛП(СтрокаТаблицаСогласованиеРабот.СтатусСогласования) = "", "", Перечисления.Согласован[СокрЛП(СтрокаТаблицаСогласованиеРабот.СтатусСогласования)]);
								
								АвторСогласования = ОбщегоНазначенияКлиентСервер.НайтиДобавитьОбъектСправочника(СтрокаТаблицаСогласованиеРабот.АвторСогласования);  
								ВыбСтрока.АвторСогласования = АвторСогласования;        
								ВыбСтрока.ДатаСогласования = XMLЗначение(Тип("Дата"), СтрокаТаблицаСогласованиеРабот.ДатаСогласования);       
								ВыбСтрока.Причина = СокрЛП(СтрокаТаблицаСогласованиеРабот.Причина);
								ВыбСтрока.ИдентификаторыПрисоединенныхФайлов = СокрЛП(СтрокаТаблицаСогласованиеРабот.ИдентификаторыПрисоединенныхФайлов);  
								ВыбСтрока.ИдентификаторСтрокиОсмотра = СокрЛП(СтрокаТаблицаСогласованиеРабот.ИдентификаторСтрокиОсмотра);      
								
								
							КонецЦикла;	
							
							//Если ДокОбъект.СогласованиеРабот.Количество() = 0 Тогда   
							//	Для Каждого ТекСтрока ИЗ ОбъектЗагрузки.ТаблицаСогласованиеРабот Цикл    
							//		НовСтрока = ДокОбъект.СогласованиеРабот.Добавить();      
							//		
							//		НовСтрока.Работы = СокрЛП(ТекСтрока.Работы);								
							//		АвторРабот = ОбщегоНазначенияКлиентСервер.НайтиДобавитьОбъектСправочника(ТекСтрока.АвторРабот);      				
							//		НовСтрока.АвторРабот = АвторРабот;       							
							//		НовСтрока.ДатаРабот = XMLЗначение(Тип("Дата"), ТекСтрока.ДатаРабот);    
							//		
							//		НовСтрока.СтатусСогласования = ?(СокрЛП(ТекСтрока.СтатусСогласования) = "", "", Перечисления.Согласован[СокрЛП(ТекСтрока.СтатусСогласования)]);
							//		
							//		АвторСогласования = ОбщегоНазначенияКлиентСервер.НайтиДобавитьОбъектСправочника(ТекСтрока.АвторСогласования);  
							//		НовСтрока.АвторСогласования = АвторСогласования;        
							//		НовСтрока.ДатаСогласования = XMLЗначение(Тип("Дата"), ТекСтрока.ДатаСогласования);  
							//		
							//		НовСтрока.ИдентификаторСтроки = СокрЛП(ТекСтрока.ИдентификаторСтроки);     
							//		НовСтрока.ИдентификаторСтрокиОсмотра = СокрЛП(ТекСтрока.ИдентификаторСтрокиОсмотра);
							//		НовСтрока.Причина = СокрЛП(ТекСтрока.Причина);
							//
							//	КонецЦикла;                                       						
							//КонецЕсли;     
							//
							
							
							ДокОбъект.Записать();
						КонецЕсли;  
						
					ИначеЕсли ОбъектЗагрузки.ТипОбъектов = "Справочник" Тогда
						
						Если ОбъектЗагрузки.ВидОбъектов = "Пользователи" Тогда
							// загружаем автомобиль      
							//	ДанныеАвтомобиль = ОбъектЗагрузки.Автомобиль;      
							
							ВыбПользователь  = ОбщегоНазначенияКлиентСервер.НайтиДобавитьОбъектСправочника(ОбъектЗагрузки);
							
						КонецЕсли;
						
					ИначеЕсли ОбъектЗагрузки.ТипОбъектов = "РегистрСведенийНаборЗаписей" Тогда
						Если ОбъектЗагрузки.ВидОбъектов = "НастройкиДоступаВидовПроводимогоОсмотра" Тогда
							// загружаем Настройки доступа видов осмотра              
							
							НаборЗаписей = РегистрыСведений.НастройкиДоступаВидовПроводимогоОсмотра.СоздатьНаборЗаписей();
							НаборЗаписей.Записывать = Истина;
							НаборЗаписей.Прочитать();
							НаборЗаписей.Очистить();
							
							Для Каждого ТекНастройка Из ОбъектЗагрузки.МассивЗаписей Цикл
								НоваяЗапись = НаборЗаписей.Добавить();
								НоваяЗапись.ВидПроводимогоОсмотра = Перечисления.ВидыПроводимогоОсмотра[СокрЛП(ТекНастройка.ВидПроводимогоОсмотра)];
								НоваяЗапись.ВидСотрудникаСервиса = Перечисления.ВидыСотрудниковСервиса[СокрЛП(ТекНастройка.ВидСотрудникаСервиса)];									
								
							КонецЦикла;  
							
							НаборЗаписей.Записать();    						
						КонецЕсли;                      							
					КонецЕсли;				                    		
				КонецЦикла;
			Иначе
				ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.Отправитель.НомерПринятого);   
			КонецЕсли;

			// загружаем данные в базу      
			//ПланыОбмена.
			//
			//
			////регистррируем изменения
			//Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			//Данные.ОбменДанными.Загрузка = Истина;
			//// здесь можно добавить заполнение доп процедуры заполнения реквизитов
			//Данные.Записать();			
		КонецЕсли;		
	КонецЦикла;    
	
		
	
	ЧтениеСообщения.ЗакончитьЧтение();   
	
	
	
КонецПроцедуры   


&НаСервере
Функция СоздаемПотверждениеОЗагрузке(ВыбОбъектВыгрузки)     
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	Узел = ПланыОбмена.МобильныйОбмен.НайтиПоКоду("ЦБ");
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Узел);

	СообщениеПодтверждения = Новый Структура("ТипСообщения", "ДанныеЗагружены");  
	
	// Если фацлы документа выгружались =- тогда добавляем запись об этом, чтобы файлы этого документа пометить на выгрузку в другие распределенные узлы обмена
	
	Если ВыбОбъектВыгрузки = Неопределено Тогда 
		СтруктураДока = "";                      
	Иначе	
		СтруктураДока = Новый Структура;
		СтруктураДока.Вставить("ТипОбъектов", "Документ");
		СтруктураДока.Вставить("ВидОбъектов", "ЗаказНаряд");     
		СтруктураДока.Вставить("ГУИД", СокрЛП(ВыбОбъектВыгрузки.ГУИД));
	КонецЕсли;     
	
	СообщениеПодтверждения.Вставить("ЗарегистрироватьФайлыДляОбменаДляОбъекта", СтруктураДока);		
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();  
	ЗаписатьJSON(ЗаписьJSON, СообщениеПодтверждения);            
	Результат = ЗаписьJSON.Закрыть();
	
	ЗаписатьXML(ЗаписьXML, Результат); 		
	
	// дальеш стандартный код
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Возврат ЗаписьXML.Закрыть();


	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляВыгрузки(ВыбОбъектВыгрузки)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	Узел = ПланыОбмена.МобильныйОбмен.НайтиПоКоду("ЦБ");
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Узел);
	
	// Типовой
	//ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел, ЗаписьСообщения.НомерСообщения);
	//Пока ВыборкаИзменений.Следующий() Цикл
	//	ОбъектОбмена = ВыборкаИзменений.Получить();
	//	ЗаписатьXML(ЗаписьXML, ОбъектОбмена);		
	//КонецЦикла;      
	
	// делаю по своему     
	
	// Это общий массив объектов с распределение по видам внутри
	МассивОбъектовВыгрузки = Новый Массив; 
	
	
	// Если ест ь объект выгрузки, тогда выгружаем измененяи по нему
	если ВыбОбъектВыгрузки <> Неопределено Тогда
	
		СоответствиеОбъектов = Новый Соответствие;      		
		
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел, ЗаписьСообщения.НомерСообщения, ВыбОбъектВыгрузки);
		Пока ВыборкаИзменений.Следующий() Цикл
			ОбъектОбмена = ВыборкаИзменений.Получить();  
			
			//1. Справочники
			Если ТипЗнч(ОбъектОбмена) = Тип("СправочникОбъект.Автомобили") Тогда
				//	Автомобиль = ОбъектОбмена.Автомобиль;   
				
				СтруктураАвтомобиль = СоответствиеОбъектов.Получить(ОбъектОбмена.Ссылка);
				
				Если СтруктураАвтомобиль = Неопределено Тогда
					СтруктураАвтомобиль = ЗаполнитьСтруктуруДанных(ОбъектОбмена);
					СоответствиеОбъектов.Вставить(ОбъектОбмена.Ссылка, СтруктураАвтомобиль);
				КонецЕсли;  
				
				МассивОбъектовВыгрузки.Добавить(СтруктураАвтомобиль);   
				
				
				//2. Документы  
			ИначеЕсли ТипЗнч(ОбъектОбмена) = Тип("ДокументОбъект.ЗаказНаряд") Тогда
				Автомобиль = ОбъектОбмена.Автомобиль;
				
				СтруктураАвтомобиль = СоответствиеОбъектов.Получить(Автомобиль);
				
				Если СтруктураАвтомобиль = Неопределено Тогда
					СтруктураАвтомобиль = ЗаполнитьСтруктуруДанных(ОбъектОбмена.Автомобиль);
					СоответствиеОбъектов.Вставить(ОбъектОбмена.Автомобиль, СтруктураАвтомобиль);
				КонецЕсли;   
				//
				Состояние = ОбъектОбмена.Состояние;
				
				СтруктураСостояние = СоответствиеОбъектов.Получить(Состояние);
				
				Если СтруктураСостояние = Неопределено Тогда
					СтруктураСостояние = ЗаполнитьСтруктуруДанных(Состояние);
					СоответствиеОбъектов.Вставить(ОбъектОбмена.Состояние, СтруктураСостояние);
				КонецЕсли;   
				
				СтруктураДока = Новый Структура;
				СтруктураДока.Вставить("ТипОбъектов", "Документ");
				СтруктураДока.Вставить("ВидОбъектов", "ЗаказНаряд");     
				СтруктураДока.Вставить("ГУИД", СокрЛП(ОбъектОбмена.ГУИД));
				СтруктураДока.Вставить("НомерДока", СокрЛП(ОбъектОбмена.Номер));
				СтруктураДока.Вставить("ДатаДока", XMLСтрока(ОбъектОбмена.Дата));
				СтруктураДока.Вставить("Состояние", СтруктураСостояние);			
				СтруктураДока.Вставить("СостояниеОсмотра", XMLСтрока(ОбъектОбмена.СостояниеОсмотра));      
				СтруктураДока.Вставить("Пробег", XMLСтрока(ОбъектОбмена.Пробег));
				
				
				СтруктураДока.Вставить("ПричинаОбращения", СокрЛП(ОбъектОбмена.ПричинаОбращения));  		
				СтруктураДока.Вставить("Комментарий", СокрЛП(ОбъектОбмена.Комментарий));
				
				//ПредставлениеДокумента = "ЗН №" + СокрЛП(ОбъектОбмена.Номер) + " от " + Формат(ОбъектОбмена.Дата, "ДЛФ=Д") + " Автомобиль; " +  СокрЛП(Автомобиль.Наименование);
				//СтруктураДока.Вставить("ПредставлениеДокумента", ПредставлениеДокумента);		
				СтруктураДока.Вставить("Автомобиль", СтруктураАвтомобиль);    
				
				// Добавить табличную часть Проведение осмотра
				МассивСтрок = Новый Массив;
				Для каждого ТекСтрока ИЗ ОбъектОбмена.ПроведениеОсмотра Цикл
					
					СтруктураСтроки = Новый Структура;
					СтруктураСтроки.Вставить("ВидПроводимогоОсмотра", XMLСтрока(ТекСтрока.ВидПроводимогоОсмотра));
					СтруктураСтроки.Вставить("Состояние", ?(XMLСтрока(ТекСтрока.Состояние) = "НеУказан", "", XMLСтрока(ТекСтрока.Состояние)));
					СтруктураСтроки.Вставить("Комментарий", СокрЛП(ТекСтрока.Комментарий));
					
					
					СтруктураАвтор = СоответствиеОбъектов.Получить(ТекСтрока.АвторЗаполнения);
					
					Если СтруктураАвтор = Неопределено Тогда
						СтруктураАвтор = ЗаполнитьСтруктуруДанных(ТекСтрока.АвторЗаполнения);  
						СоответствиеОбъектов.Вставить(ТекСтрока.АвторЗаполнения, СтруктураАвтор);  	
						
					КонецЕсли;
					
					
					СтруктураСтроки.Вставить("АвторЗаполнения", СтруктураАвтор);         				
					СтруктураСтроки.Вставить("ИдентификаторыПрисоединенныхФайлов", СокрЛП(ТекСтрока.ИдентификаторыПрисоединенныхФайлов));
					СтруктураСтроки.Вставить("ИдентификаторСтроки", СокрЛП(ТекСтрока.ИдентификаторСтроки));
					
					
					
					//СтруктураАвтор = Новый Структура;
					//СтруктураАвтор.Вставить("ГУИД", Строка(ТекСтрока.АвторЗаполнения.УникальныйИдентификатор()));
					//СтруктураАвтор.Вставить("Код", СокрЛП(ТекСтрока.АвторЗаполнения.Код));			
					//СтруктураАвтор.Вставить("Наименование", СокрЛП(ТекСтрока.АвторЗаполнения.Наименование));			
					//СтруктураСтроки.Вставить("АвторЗаполнения", СтруктураАвтор);
					
					МассивСтрок.Добавить(СтруктураСтроки);  	
					
				КонецЦикла;     
				
				СтруктураДока.Вставить("ТаблицаПроведениеОсмотра", МассивСтрок);  		
				
				
				// Добавить табличную часть СогласованиеРабот
				МассивСтрок = Новый Массив;
				Для каждого ТекСтрока ИЗ ОбъектОбмена.СогласованиеРабот Цикл
					
					СтруктураСтроки = Новый Структура;
					СтруктураСтроки.Вставить("Работы", XMLСтрока(ТекСтрока.Работы));
					
					СтруктураАвторРабот = СоответствиеОбъектов.Получить(ТекСтрока.АвторРабот);
					
					Если СтруктураАвторРабот = Неопределено Тогда
						СтруктураАвторРабот = ЗаполнитьСтруктуруДанных(ТекСтрока.АвторРабот);  
						СоответствиеОбъектов.Вставить(ТекСтрока.АвторРабот, СтруктураАвторРабот);					
					КонецЕсли;      
					СтруктураСтроки.Вставить("АвторРабот", СтруктураАвторРабот);
					
					СтруктураСтроки.Вставить("ДатаРабот", XMLСтрока(ТекСтрока.ДатаРабот));
					
					СтруктураСтроки.Вставить("СтатусСогласования", ?(XMLСтрока(ТекСтрока.СтатусСогласования) = "НеУказан", "", XMLСтрока(ТекСтрока.СтатусСогласования)));
					
					
					СтруктураАвторСогласования = СоответствиеОбъектов.Получить(ТекСтрока.АвторСогласования);
					
					Если СтруктураАвторСогласования = Неопределено Тогда
						СтруктураАвторСогласования = ЗаполнитьСтруктуруДанных(ТекСтрока.АвторСогласования);  
						СоответствиеОбъектов.Вставить(ТекСтрока.АвторСогласования, СтруктураАвторСогласования);					
					КонецЕсли;           			
					
					СтруктураСтроки.Вставить("АвторСогласования", СтруктураАвторСогласования);    
					СтруктураСтроки.Вставить("ДатаСогласования", XMLСтрока(ТекСтрока.ДатаСогласования));
					
					
					СтруктураСтроки.Вставить("ИдентификаторСтроки", СокрЛП(ТекСтрока.ИдентификаторСтроки));
					СтруктураСтроки.Вставить("ИдентификаторСтрокиОсмотра", СокрЛП(ТекСтрока.ИдентификаторСтрокиОсмотра));   
					СтруктураСтроки.Вставить("ИдентификаторыПрисоединенныхФайлов", СокрЛП(ТекСтрока.ИдентификаторыПрисоединенныхФайлов));
					
					СтруктураСтроки.Вставить("Причина", СокрЛП(ТекСтрока.Причина));
					
					
					//СтруктураАвтор = Новый Структура;
					//СтруктураАвтор.Вставить("ГУИД", Строка(ТекСтрока.АвторЗаполнения.УникальныйИдентификатор()));
					//СтруктураАвтор.Вставить("Код", СокрЛП(ТекСтрока.АвторЗаполнения.Код));			
					//СтруктураАвтор.Вставить("Наименование", СокрЛП(ТекСтрока.АвторЗаполнения.Наименование));			
					//СтруктураСтроки.Вставить("АвторЗаполнения", СтруктураАвтор);
					
					МассивСтрок.Добавить(СтруктураСтроки);  	
					
				КонецЦикла;
				
				
				СтруктураДока.Вставить("ТаблицаСогласованиеРабот", МассивСтрок);
				
				МассивОбъектовВыгрузки.Добавить(СтруктураДока);    			
			КонецЕсли;	
			
		КонецЦикла;	    
		
		//Если МассивОбъектовВыгрузки.Количество() = 0 Тогда
		//	СтруктураДанных = Новый Структура("ТипОбъектов", "");
		//	МассивОбъектовВыгрузки.Добавить(СтруктураДанных);   		
		//КонецЕсли;	
	КонецЕсли;
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();  
	ЗаписатьJSON(ЗаписьJSON, ?(МассивОбъектовВыгрузки.Количество() = 0, "", МассивОбъектовВыгрузки));            
	Результат = ЗаписьJSON.Закрыть();
	
	ЗаписатьXML(ЗаписьXML, Результат); 		
	
	// дальеш стандартный код
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции       

&НаСервере
Функция ПолучитьТаблицуФайлыДляВыгрузки(ВыбОбъектВыгрузки)   
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФайлыДляОбмена.Объект КАК Объект,
	               |	ФайлыДляОбмена.Идентификатор КАК Идентификатор,
	               |	ФайлыДляОбмена.НомерПринятого КАК НомерПринятого,
	               |	ФайлыДляОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
	               |	ФайлыДляОбмена.ДатаЗагрузки КАК ДатаЗагрузки,
	               |	ФайлыДляОбмена.Комментарий КАК Комментарий
	               |ИЗ
	               |	РегистрСведений.ФайлыДляОбмена КАК ФайлыДляОбмена
	               |ГДЕ
	               |	1 = 1
	               |	И ФайлыДляОбмена.ДатаЗагрузки = &ПустаяДата";    
	
	Если ВыбОбъектВыгрузки <> Неопределено Тогда   
		Запрос.Текст = СтрЗаменить(запрос.Текст, "1 = 1", "ФайлыДляОбмена.Объект = &Объект");	
		Запрос.УстановитьПараметр("Объект", ВыбОбъектВыгрузки);                                	
	КонецЕсли;                                                                                 
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	
	результатЗапроса = запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат результатЗапроса.Выгрузить();	
КонецФункции

&НаСервере
Функция ПолучитьДанныеЗаписиРегистра(Объект, Идентификатор)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КартинкиИФайлы.Объект КАК Объект,
	|	КартинкиИФайлы.Идентификатор КАК Идентификатор,
	|	КартинкиИФайлы.ИмяФайла КАК ИмяФайла,
	|	КартинкиИФайлы.ДатаСохранения КАК ДатаСохранения,
	|	КартинкиИФайлы.РазмерФайла КАК РазмерФайла,
	|	КартинкиИФайлы.Комментарий КАК Комментарий,
	|	КартинкиИФайлы.Данные КАК Данные,
	|	КартинкиИФайлы.ДанныеВоВнешнемФайле КАК ДанныеВоВнешнемФайле,
	|	КартинкиИФайлы.Картинка КАК Картинка,
	|	КартинкиИФайлы.GUID КАК GUID,
	|	КартинкиИФайлы.ТипФайла КАК ТипФайла
	|ИЗ
	|	РегистрСведений.КартинкиИФайлы КАК КартинкиИФайлы
	|ГДЕ
	|	КартинкиИФайлы.Объект = &Объект
	|	И КартинкиИФайлы.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);    
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Неопределено;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтруктуруДанных(ТекОбъект)    
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ГУИД", Строка(ТекОбъект.ГУИД));
	СтруктураДанных.Вставить("Код", СокрЛП(ТекОбъект.Код));
	СтруктураДанных.Вставить("Наименование", СокрЛП(ТекОбъект.Наименование)); 
	
	СтруктураДанных.Вставить("ТипОбъектов", "Справочник");  
	
	
	Если ТипЗнч(ТекОБъект) = Тип("СправочникОбъект.Автомобили")
		ИЛИ  ТипЗнч(ТекОБъект) = Тип("СправочникСсылка.Автомобили") Тогда
		СтруктураДанных.Вставить("ВидОбъектов", "Автомобили");  
		СтруктураДанных.Вставить("VIN", Строка(ТекОбъект.VIN));
		СтруктураДанных.Вставить("НаименованиеПолное", СокрЛП(ТекОбъект.НаименованиеПолное));
		СтруктураДанных.Вставить("ГосНомер", XMLСтрока(ТекОбъект.ГосНомер));
		СтруктураДанных.Вставить("Пробег", XMLСтрока(ТекОбъект.Пробег));
		
		СтруктураДанных.Вставить("ГодВыпуска", Строка(ТекОбъект.ГодВыпуска));
		СтруктураДанных.Вставить("ТипТС", XMLСтрока(ТекОбъект.ТипТС));   		
		
	ИначеЕсли ТипЗнч(ТекОБъект) = Тип("СправочникОбъект.Пользователи")
		ИЛИ  ТипЗнч(ТекОБъект) = Тип("СправочникСсылка.Пользователи") Тогда
		СтруктураДанных.Вставить("ВидОбъектов", "Пользователи");     
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьФайлы(ВСОпределение, ВОперация, ВСПрокси)     
	
	КоличествоИтераций = 10000;
	
	ЗагружаемФайлы = Истина;       
	
	СтруктураЗагруженногоФайла = Новый Структура;        
	
	// Если структура пустая, то начинаем просто загрузку файла, потом в каждом вызове будем отсылать запрос на потверждение
	СтруктураЗагруженногоФайла.Вставить("КодУзла", СокрЛП(ПланыОбмена.МобильныйОбмен.ЭтотУзел().Код));
	СтруктураЗагруженногоФайла.Вставить("ОбъектТип", "");
	СтруктураЗагруженногоФайла.Вставить("ОбъектВид", "");             
	СтруктураЗагруженногоФайла.Вставить("ГУИД", "");   
	СтруктураЗагруженногоФайла.Вставить("Идентификатор", "");   	
	
	счИтераций = 0;
	
	Пока ЗагружаемФайлы Цикл    
		счИтераций = счИтераций + 1;
		
		
		Если счИтераций > КоличествоИтераций Тогда
			Прервать;
		КонецЕсли;
		
		// отправляем данные файла  
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();  
		ЗаписатьJSON(ЗаписьJSON, СтруктураЗагруженногоФайла);            
		Результат = ЗаписьJSON.Закрыть();
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписатьXML(ЗаписьXML, Результат); 		
		
		ДанныеДляВыгрузки = ЗаписьXML.Закрыть();    	
		
		Данные = Новый ХранилищеЗначения(ДанныеДляВыгрузки, Новый СжатиеДанных(9));
		
		
		//Данные = Новый ХранилищеЗначения(СтруктураДанныхФайла, Новый СжатиеДанных(9));
		
		ДанныеXTDO = ВСОпределение.ФабрикаXDTO.Создать(ВОперация.Параметры.Получить("Данные").Тип, Данные);
		//ВСПрокси = Новый WSПрокси(ВСОпределение, "Data", "WebОбмен", "WebОбменSoap");      
		//ВСПрокси.Пользователь = ЛогинПодключения;
		//ВСПрокси.Пароль = ПарольПодключения;
		Ответ = ВСПрокси.ВыгрузкаФайлов(ДанныеXTDO);  
		
		ДанныеФайла = Ответ.Получить();   
		
		
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ДанныеФайла);
		//ЧтениеXML.Прочитать();
		
		Данные = ПрочитатьXML(ЧтениеXML);    
		
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(Данные);
		//
		//ЧтениеJSON.УстановитьСтроку(
		СтруктураДанныхФайла = ПрочитатьJSON(ЧтениеJSON);     
		
		Если СтруктураДанныхФайла.ОбъектТип  = "" Тогда     
			// В 1с нет файлов дял выгрузки
			Прервать;    
		КонецЕсли;                                  		
		
		
		// Получаем ОбъетСсылка    
		
		ОбъектТип = СтруктураДанныхФайла.ОбъектТип; 		
		
		ОбъектВид = СтруктураДанныхФайла.ОбъектВид;
		ОбъектИдентификатор	 = Новый УникальныйИдентификатор(СтруктураДанныхФайла.ГУИД);
		
		Если ОбъектТип = "Документ" Тогда
			ОбъектСсылка = НайтиДокумент(ОбъектВид, СтруктураДанныхФайла.ГУИД); //	ОбщегоНазначенияКлиентСервер.НайтиДокумент(ОбъектВид, СтруктураДанныхФайла.ГУИД);        			
		ИначеЕсли ОбъектТип = "Справочник" Тогда
			ОбъектСсылка = НайтиДобавитьОбъектСправочника(СтруктураДанныхФайла); //ОбщегоНазначенияКлиентСервер.НайтиДобавитьОбъектСправочника(СтруктураДанныхФайла);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда   
			
			СтруктураЗагруженногоФайла = Новый Структура;  				
			СтруктураЗагруженногоФайла.Вставить("ОбъектТип", ОбъектТип);
			СтруктураЗагруженногоФайла.Вставить("ОбъектВид", ОбъектВид);             
			СтруктураЗагруженногоФайла.Вставить("ГУИД", СтруктураДанныхФайла.ГУИД);     				
			СтруктураЗагруженногоФайла.Вставить("Идентификатор", СтруктураДанныхФайла.Идентификатор);   
			СтруктураЗагруженногоФайла.Вставить("ДатаЗагрузки",  XMLСтрока(Дата(1, 1, 1)));        
			СтруктураЗагруженногоФайла.Вставить("НеВыгружать",  "Истина");
			
			
		Иначе	
			
			
			НаборЗаписей = РегистрыСведений.КартинкиИФайлы.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка, Истина);
			НаборЗаписей.Отбор.Идентификатор.Установить(СтруктураДанныхФайла.Идентификатор, Истина);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();     
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект = ОбъектСсылка;
			НоваяЗапись.Идентификатор = СтруктураДанныхФайла.Идентификатор;
			НоваяЗапись.ИмяФайла = СтруктураДанныхФайла.GUID;     
			
			НоваяЗапись.ДатаСохранения = XMLЗначение(Тип("Дата"), СтруктураДанныхФайла.ДатаСохранения);
			НоваяЗапись.РазмерФайла = XMLЗначение(Тип("Число"), СтруктураДанныхФайла.РазмерФайла);
			НоваяЗапись.Комментарий = СтруктураДанныхФайла.Комментарий;
			НоваяЗапись.ДанныеВоВнешнемФайле = Ложь; //?(СтруктураДанныхФайла.ДанныеВоВнешнемФайле = "Истина", Истина, Ложь);
			НоваяЗапись.Картинка = ?(СтруктураДанныхФайла.Картинка = "Истина", Истина, Ложь);
			НоваяЗапись.GUID = СтруктураДанныхФайла.GUID; 	
			
			ТипФайла = "image";
			
			// получаем расширение файла
			МассивПодстрок = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураДанныхФайла.GUID, ".");
			
			Если МассивПодстрок.Количество() > 1 Тогда				
				РасширениеФайла = МассивПодстрок[МассивПодстрок.Количество() - 1];
				
				Если РасширениеФайла = 	"m4a" Тогда
					ТипФайла = "audio";       
				ИначеЕсли РасширениеФайла = "mp4" Тогда
					ТипФайла = "video";       
				КонецЕсли;  			
			КонецЕсли; 
			
			НоваяЗапись.ТипФайла = ТипФайла;	
			
			
			ДвоичныеДанные = Base64Значение(СтруктураДанныхФайла.Данные);    		
			НоваяЗапись.Данные = Новый ХранилищеЗначения(ДвоичныеДанные);   				
			
			
			ПОпытка                  
				НаборЗаписей.ФайлЗагружаетсяИзЦентральнойБазы = Истина;
				НаборЗаписей.Записать();
				
				СтруктураЗагруженногоФайла = Новый Структура;  	
				СтруктураЗагруженногоФайла.Вставить("КодУзла", СокрЛП(ПланыОбмена.МобильныйОбмен.ЭтотУзел().Код));  
				СтруктураЗагруженногоФайла.Вставить("ОбъектТип", ОбъектТип);
				СтруктураЗагруженногоФайла.Вставить("ОбъектВид", ОбъектВид);             
				СтруктураЗагруженногоФайла.Вставить("ГУИД", СтруктураДанныхФайла.ГУИД);     				
				СтруктураЗагруженногоФайла.Вставить("Идентификатор", СтруктураДанныхФайла.Идентификатор);   
				СтруктураЗагруженногоФайла.Вставить("ДатаЗагрузки",  XMLСтрока(ТекущаяДата())); 
				
			Исключение
				Результат.Вставить("Ошибка",  "Не удалось сзаписть файл в регистр сведенйи ""Картинки и файлы""");
				
			КонецПопытки;
			
			
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры    

&НаСервере
Функция УстановитьСтатусДокументаВАльфа(СтруктураДокумента, Статус) Экспорт
	
	
	///TGA/hs/MB/api/docs/setstatus
	
	ИмяОбъекта = "docs";   
	ИмяМетода = "setstatus";
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("VidDoca", СтруктураДокумента.ВидДока); 
	СтруктураПараметров.Вставить("GUID", СтруктураДокумента.ГУИД); 
	СтруктураПараметров.Вставить("Status", Статус); 
	СтруктураПараметров.Вставить("KodUzla", СокрЛП(ПланыОбмена.МобильныйОбмен.ЭтотУзел().Код)); 
	СтруктураПараметров.Вставить("DateTimeStatusa", XMLСтрока(ТекущаяДата()));
	
	СтруктураОтвет = РезультатОтправкиЗапросаЗапроса(ИмяОбъекта, ИмяМетода, СтруктураПараметров);             
	
	Возврат СтруктураОтвет;	
	
КонецФункции

&НаСервере
Функция ЭтоТестовыйРежим() Экспорт 
	Возврат Константы.ТестовыйРежим.Получить();	
КонецФункции

&НаСервере
Функция РезультатОтправкиЗапросаЗапроса(ИмяОбъекта, ИмяМетода, СтруктураПараметров = Неопределено)   	
	
	перРесурс = "/" + Константы.ИмяПубликации.Получить() + "/hs/MB/api/" + ИмяОбъекта + "/" + ИмяМетода;      
	//	
	//перЗапрос = перРесурс + перПараметры;     
	
	ПараметрыСтрокаJSON = "";
	
	Если СтруктураПараметров <> "" Тогда 
		ПараметрыСтрокаJSON =  ОбщегоНазначенияКлиентСервер.СформироватьСтрокуJSON(СтруктураПараметров);    
	КонецЕсли;
	
	
	перСервер = СокрЛП(Константы.ПодключениеСервер.Получить());  
	перПорт = Число(Константы.ПодключениеПорт.Получить()); 
	перПользователь = СокрЛП(Константы.ПодключениеЛогин.Получить()); 
	перПароль = СокрЛП(Константы.ПодключениеПароль.Получить());  	
	
	
	HTTPСоединение = Новый HTTPСоединение(перСервер, перПорт, перПользователь, перПароль);   
	
	HTTPЗапрос= Новый HTTPЗапрос(перРесурс);        
	HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыСтрокаJSON,  "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	//HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);         
	
	
	//	Если HTTPОтвет.КодСостояния = 200 Тогда
	ОтветJSON = HTTPОтвет.ПолучитьТелоКакСтроку();  
	
	ЧтениеJSON = Новый ЧтениеJSON;  
	ЧтениеJSON.УстановитьСтроку(ОтветJSON);       
	СтруктураПараметровОтвета = ПрочитатьJSON(ЧтениеJSON);  
	
	//	КонецЕсли;
	
	Возврат СтруктураПараметровОтвета;
	
КонецФункции 

#КонецОбласти       



#Область ОбменДанными 

&НаСервере                                                            	
Функция НайтиДобавитьОбъектСправочника(ДанныеСпр) Экспорт         
	
	Если ДанныеСпр.ВидОбъектов = "ВидыСостоянийЗаказНарядов" Тогда    
		ТекЭлемент = Справочники.ВидыСостоянийЗаказНарядов.НайтиПоКоду(ДанныеСпр.Код);
		
		Если ЗначениеЗаполнено(ТекЭлемент) Тогда  
			Если СокрЛП(ТекЭлемент.ГУИД) = "" Тогда       
				СпрОбъект =  ТекЭлемент.ПолучитьОБъект();  
				СпрОбъект.ГУИД = ДанныеСпр.ГУИД;
				СпрОбъект.Записать();   
				
				ТекЭлемент = СпрОбъект.Ссылка;
			КонецЕсли;  
			
			Возврат ТекЭлемент;		
		КонецЕсли;
		
		
	КонецЕсли;
	
	ГУИД = СокрЛП(ДанныеСпр.ГУИД);  
	
	Если  ГУИД = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат Справочники[ДанныеСпр.ВидОбъектов].ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Автомобили КАК Спр
	|ГДЕ
	|	Спр.ГУИД = &ГУИД";          
	
	Если ДанныеСпр.ВидОбъектов <> "Автомобили" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Автомобили", ДанныеСпр.ВидОбъектов);    	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГУИД", ГУИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СпрОбъект = Справочники[ДанныеСпр.ВидОбъектов].СоздатьЭлемент();
		СпрОбъект.ГУИД = ДанныеСпр.ГУИД;    
	ИНаче       
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
		ВыборкаДетальныеЗаписи.Следующий();          
		
		//Если ДанныеСпр.ВидОбъектов = "Пользователи" Тогда
		//	Возврат ВыборкаДетальныеЗаписи.Ссылка;
		//Иначе	  
		СпрОБъект =  ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект(); 
		//	КонецЕсли;
	КонецЕсли;
	
	СпрОБъект.Код = ДанныеСпр.Код;	
	СпрОБъект.Наименование = ДанныеСпр.Наименование;    
	
	Если ДанныеСпр.ВидОбъектов = "Автомобили" Тогда 	
		СпрОБъект.VIN = ДанныеСпр.VIN;
		СпрОБъект.НаименованиеПолное = ДанныеСпр.НаименованиеПолное;
		СпрОБъект.ГосНомер = ДанныеСпр.ГосНомер;
		СпрОБъект.Пробег = ДанныеСпр.Пробег;
		СпрОБъект.ГодВыпуска = ДанныеСпр.ГодВыпуска; 
		СпрОБъект.ТипТС  = Перечисления.ТипыТС[ДанныеСпр.ТипТС];            
		СпрОБъект.Модель  = СокрЛП(ДанныеСпр.Модель);     
		
		СпрОБъект.ПредставлениеКраткое = СокрЛП(СокрЛП(ДанныеСпр.Модель) + " " + ДанныеСпр.ГосНомер);
		
		
	ИначеЕсли ДанныеСпр.ВидОбъектов = "Пользователи" Тогда 	  
		СпрОБъект.ПарольМБ = ДанныеСпр.ПарольМБ;    	
	КонецЕсли;
	
	СпрОБъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции    


Функция НайтиДокумент(ВидДокумента, ГУИД) Экспорт    
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаряд КАК Док
	|ГДЕ
	|	Док.ГУИД ПОДОБНО &ГУИД";  
	
	Если ВидДокумента <> "ЗаказНаряд" Тогда  
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗаказНаряд", "Документ." +ВидДокумента);
	КонецЕсли;       
	
	Запрос.УстановитьПараметр("ГУИД", ГУИД + "%");
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	ВыборкаДетальныеЗаписи.Следующий();                 
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Процедура УдалитьКартинкииФайлыДляОбъекта(ВыбОбъект)
	
	НаборЗаписей = РегистрыСведений.КартинкиИФайлы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ВыбОбъект, Истина);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры 

Процедура СообщитьПользователю(ТекстСообщения) ЭКспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
КонецПроцедуры



#КонецОбласти