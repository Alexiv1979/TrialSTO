#Область МоиПроцедурыФункции

// Определяет заполнено ли переданное значение
//
// Параметры: 
//  Значение - Неопределено - Значение, заполнение которого надо проверить
//
// Возвращаемое значение:
//  Булево - Истина, если значение не заполнено, иначе ложь.
//    

&НаСервере
Функция ПолучитьТекущегоПользователя() Экспорт
	Возврат ПараметрыСеанса.Пользователь;
КонецФункции

//&НаКлиенте
//Функция ПользовательПоУмолчанию() Экспорт 
//	Возврат ПользовательПоУмолчаниюНаСервере();	
//КонецФункции                              

&НаСервере
Функция ПользовательПоУмолчанию() Экспорт 
	Возврат Константы.Пользователь.Получить();	
КонецФункции   


&НаСервере
Функция МассивНеобязательныхВидовОсмотраДлязаполнения() Экспорт
	
	МассивВидовОсмотра = Новый Массив;
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.СостояниеНаружнегоОсвещения);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.УровеньМоторногоМасла);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.УровеньОхлаждающейЖидкости);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.СлышимыеУтечкиВоздуха);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.УровеньТормознойЖидкости);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.ВидимыеПодтекиМаслаИЖидкостиИзУплотинтелей);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.СостояниеКрепленийБаковИПодтеки);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.ВидимыТрещиныПружинВоздушныхПодушек);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.ПодтекиАмортизаторовСостояниеИхКреплений);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.ГерметичностьСистемыВыпускаОтработанныхГазов);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.ПроверкаЭлементовКарданнойПередачи);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.ЛюфтКрепленийСтабилизаторовИТорсионов);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.ЛюфтРулевыхТягНаконечников);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.ЛюфтВтулокРессор);
	МассивВидовОсмотра.Добавить(Перечисления.ВидыПроводимогоОсмотра.ВизуальныйОсмоторАккумуляторныхБатарейКлемм);
	
	Возврат МассивВидовОсмотра;
	
КонецФункции



&НаСервере
Функция обЗначениеНеЗаполнено(Значение) Экспорт

	Результат = Ложь;
	
	Попытка
		Результат = Не ЗначениеЗаполнено(Значение)	
	Исключение // Мутабельные типы (Объекты)
		Результат = Ложь
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // обЗначениеНеЗаполнено()
// Функция возвращает ссылку на элемент справочника "Пользователи",
// соответствующий текущему пользователю информационной базы.
// Вызывается при начале работы системы и может осуществлять первичное создание
// элемента пользователя, для вошедшего первый раз.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка - элемент справочника "Пользователи"
//
&НаСервере
Функция обОпределитьТекущегоПользователя() Экспорт

	Если ПустаяСтрока(ИмяПользователя()) Тогда
		ИмяПользователя           = "Администратор";
		ПолноеИмяПользователя     = "Администратор информационной базы";
	Иначе
		ИмяПользователя           = ИмяПользователя();
		//Если ПустаяСтрока(ПолноеИмяПользователя()) Тогда
			ПолноеИмяПользователя = ИмяПользователя;
		//Иначе
		//	ПолноеИмяПользователя = ПолноеИмяПользователя();
		//КонецЕсли;
	КонецЕсли;
	
	// Попытаемся найти этого пользователя.
	Пользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);
	Если обЗначениеНеЗаполнено(Пользователь) Тогда
		// Пользователь входит в систему первый раз
		#Если Клиент Тогда
			Предупреждение("Зарегистрирован первый вход в систему для пользователя 
					   |"""+ИмяПользователя + """", 5);
		#Иначе	
			Сообщить("Зарегистрирован первый вход в систему для пользователя "+ИмяПользователя,СтатусСообщения.Важное);
		#КонецЕсли
		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();
		ОбъектПользователь.Код           = ИмяПользователя;
		ОбъектПользователь.Наименование  = ПолноеИмяПользователя;
		ОбъектПользователь.Записать();
		Пользователь = ОбъектПользователь.Ссылка;
	КонецЕсли;

	Возврат Пользователь;
КонецФункции // обОпределитьТекущегоПользователя()

&НаСервере
Функция НайтиНоменклатуруПоШтрихКоду(Штрихкод) Экспорт
	Возврат Справочники.Номенклатура.ПустаяСсылка();
КонецФункции     

&НаСервере  
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт	
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции


// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые
//  строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
// 
&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Строка, Разделитель = ",", ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	ВремСтрока = Строка;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(ВремСтрока) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(ВремСтрока, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(ВремСтрока, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		ВремСтрока = Сред(ВремСтрока, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(ВремСтрока, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(ВремСтрока) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(ВремСтрока));
		Иначе
			Результат.Добавить(ВремСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


&НаСервере
Функция РазложитьМассивВСтроку(Массив, Разделитель = ",") Экспорт
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда     
		ТекСтрока = "";
		
		Для Каждого ТекЭлемент ИЗ Массив Цикл
			ТекСтрока = ТекСтрока + ?(ТекСтрока, "", Разделитель)+ СокрЛП(ТекЭлемент);
		КонецЦикла;                                                                   
		
		Возврат ТекСтрока;
	Иначе
		Возврат Строка(Массив);
	КонецЕсли;
	
КонецФункции 


Функция ПолучитьПредставлениеИнформационнойБазы() Экспорт
	//Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
	СтрокаСоединенияСБД =  СтрокаСоединенияИнформационнойБазы();
	//КонецЕсли;
	ЭтоФайловаяИБ = Найти(Врег(СтрокаСоединенияСБД), "FILE=") = 1;
	Если ЭтоФайловаяИБ Тогда
		ПутьКБД = Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
		ФайловаяБД = Истина;
	Иначе
		// надо к имени сервера прибавить имя пути информационной базы
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКБД = ИмяСервера + "/ " + ИмяИБНаСервере;
		ФайловаяБД = Ложь;
	КонецЕсли;
	Возврат ПутьКБД;
КонецФункции    


&НаКлиенте
Функция ПользовательПриАвторизации() Экспорт
	//
	//ВыбПользователь = Справочники.Пользователи.ПустаяСсылка();       
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеПриЗакрытииФормыАвторизации", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаАвторизации", , ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
	
КонецФункции 

Процедура ОповещениеПриЗакрытииФормыАвторизации(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти 

#Область ОбщегоНазначения
Процедура СообщениеПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь,
		ЭтоОбъект = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Отказ = Истина;   
	
	Сообщение.Сообщить();

	
КонецПроцедуры             
#КонецОбласти



#Область Отборы 

// Добавить или заменить существующий элемент отбора.
//
// Параметры:
//  ОбластьПоискаДобавления - ОтборКомпоновкиДанных
//                          - ГруппаЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                     например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - Произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
// 

&НаСервере
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
		ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив")
				Или ТипЗнч(ПравоеЗначение) = Тип("ФиксированныйМассив")
				Или ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
			ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры




// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   ДинамическийСписок - ДинамическийСписок - список, в котором требуется установить отбор.
//   ИмяПоля            - Строка - поле, по которому необходимо установить отбор.
//   ПравоеЗначение     - Произвольный - значение отбора.
//       Необязательный. Значение по умолчанию Неопределено.
//       Внимание! Если передать Неопределено, то значение не будет изменено.
//   ВидСравнения  - ВидСравненияКомпоновкиДанных - условие отбора.
//   Представление - Строка - представление элемента компоновки данных.
//       Необязательный. Значение по умолчанию Неопределено.
//       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
//       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
//   Использование - Булево - флажок использования этого отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - способ отображения этого отбора
//                                                                          пользователю:
//        РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - в группе быстрых настроек над списком.
//        РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - в настройка списка (в подменю Еще).
//        РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - запретить пользователю менять этот отбор.
//   ИдентификаторПользовательскойНастройки - Строка - уникальный идентификатор этого отбора.
//       Используется для связи с пользовательскими настройками.
//
&НаСервере
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Иначе
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
	КонецЕсли;
	
	УстановитьЭлементОтбора(
		ОтборДинамическогоСписка,
		ИмяПоля,
		ПравоеЗначение,
		ВидСравнения,
		Представление,
		Использование,
		РежимОтображения,
		ИдентификаторПользовательскойНастройки);
	
	КонецПроцедуры            
	
// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - ОтборКомпоновкиДанных
//                    - ГруппаЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                              например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  ПравоеЗначение          - Произвольный - сравниваемое значение.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - элемент компоновки.
//  
&НаСервере
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции     

// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры:
//  ОбластьПоиска - ОтборКомпоновкиДанных
//                - ГруппаЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                          например Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  Представление           - Строка - представление элемента компоновки данных.
//  ПравоеЗначение          - Произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
// Возвращаемое значение:
//  Число - количество измененных элементов.
//     
&НаСервере
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
		Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции     

&НаСервере
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры     
#КонецОбласти


#Область ОбменДанными 

&НаСервере                                                            	
Функция НайтиДобавитьОбъектСправочника(ДанныеСпр) Экспорт         
	
	Если ДанныеСпр.ВидОбъектов = "ВидыСостоянийЗаказНарядов" Тогда    
		ТекЭлемент = Справочники.ВидыСостоянийЗаказНарядов.НайтиПоКоду(ДанныеСпр.Код);
		
		Если ЗначениеЗаполнено(ТекЭлемент) Тогда  
			Если СокрЛП(ТекЭлемент.ГУИД) = "" Тогда       
				СпрОбъект =  ТекЭлемент.ПолучитьОБъект();  
				СпрОбъект.ГУИД = ДанныеСпр.ГУИД;
				СпрОбъект.Записать();   
				
				ТекЭлемент = СпрОбъект.Ссылка;
			КонецЕсли;  
			
			Возврат ТекЭлемент;		
		КонецЕсли;
		
		
	КонецЕсли;
	
    ГУИД = СокрЛП(ДанныеСпр.ГУИД);  
	
	Если  ГУИД = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат Справочники[ДанныеСпр.ВидОбъектов].ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Автомобили КАК Спр
	|ГДЕ
	|	Спр.ГУИД = &ГУИД";          
	
	Если ДанныеСпр.ВидОбъектов <> "Автомобили" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Автомобили", ДанныеСпр.ВидОбъектов);    	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГУИД", ГУИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СпрОбъект = Справочники[ДанныеСпр.ВидОбъектов].СоздатьЭлемент();
		СпрОбъект.ГУИД = ДанныеСпр.ГУИД;    
	ИНаче       
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
		ВыборкаДетальныеЗаписи.Следующий();          
		
		//Если ДанныеСпр.ВидОбъектов = "Пользователи" Тогда
		//	Возврат ВыборкаДетальныеЗаписи.Ссылка;
		//Иначе	  
			СпрОБъект =  ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект(); 
	//	КонецЕсли;
	КонецЕсли;
	
	СпрОбъект.Код = ДанныеСпр.Код;	
	СпрОбъект.Наименование = ДанныеСпр.Наименование;    
	
	Если ДанныеСпр.ВидОбъектов = "Автомобили" Тогда 	
		СпрОбъект.VIN = ДанныеСпр.VIN;
		СпрОбъект.НаименованиеПолное = ДанныеСпр.НаименованиеПолное;
		СпрОбъект.ГосНомер = ДанныеСпр.ГосНомер;
		СпрОбъект.Пробег = ДанныеСпр.Пробег;
		СпрОбъект.ГодВыпуска = ДанныеСпр.ГодВыпуска; 
		СпрОбъект.ТипТС  = Перечисления.ТипыТС[ДанныеСпр.ТипТС];            
		СпрОбъект.Модель  = СокрЛП(ДанныеСпр.Модель);     
		
		СпрОбъект.ПредставлениеКраткое = СокрЛП(СокрЛП(ДанныеСпр.Модель) + " " + ДанныеСпр.ГосНомер);

		
	ИначеЕсли ДанныеСпр.ВидОбъектов = "Пользователи" Тогда 	  
		СпрОбъект.ПарольМБ = ДанныеСпр.ПарольМБ; 
		
		Если ЗначениеЗаполнено(ДанныеСпр.ВидСотрудникаСервиса) Тогда
			СпрОбъект.ВидСотрудникаСервиса = Перечисления.ВидыСотрудниковСервиса[ДанныеСпр.ВидСотрудникаСервиса];			
		Иначе                             
			 СпрОбъект.ВидСотрудникаСервиса = "";			
		КонецЕсли;
	КонецЕсли;
	
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции    

&НаСервере
Функция НайтиДокумент(ВидДокумента, ГУИД) Экспорт    

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаряд КАК Док
		|ГДЕ
		|	Док.ГУИД ПОДОБНО &ГУИД";  
	
	Если ВидДокумента <> "ЗаказНаряд" Тогда  
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗаказНаряд", "Документ." +ВидДокумента);
	КонецЕсли;       
	
	Запрос.УстановитьПараметр("ГУИД", ГУИД + "%");
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	ВыборкаДетальныеЗаписи.Следующий();                 
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции
	

#КонецОбласти	 

#Область HTTPWEB      

//// ПОДГОТОВКА РЕЗУЛЬТАТА
&НаСервере     
Функция СформироватьСтрокуJSON(Данные) Экспорт
	
	СтрокаJSON = "";
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "", Истина);
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.УстановитьСтроку(ПараметрыJSON);
	 		
	ЗаписатьJSON(Запись, Данные, НастройкиСериализации);
	СтрокаJSON = Запись.Закрыть();


	Возврат СтрокаJSON;
	
КонецФункции



#КонецОбласти




